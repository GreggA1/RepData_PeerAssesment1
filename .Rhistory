Sepal_Length <- iris[, 1:1]
Sepal_Length
Sapply(Sepal_Length, mean)
sapply(Sepal_Length,mean)
sappl(Sepal_Length,mean)
sapply(Sepal_Length,mean)
summary(Sepal_Length,mean)
source('C:/Users/gregg.abramovich/Desktop/R Notes!/test1.R')
> my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
> my_matrix$get()
[,1] [,2]
[1,]    1    3
[2,]    2    4
> my_matrix$getInverse()
NULL
> cacheSolve(my_matrix)
[,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> cacheSolve(my_matrix)
getting cached data
[,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> my_matrix$getInverse()
[,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
> my_matrix$get()
[,1] [,2]
[1,]    2    1
[2,]    2    4
> my_matrix$getInverse()
NULL
> cacheSolve(my_matrix)
[,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> cacheSolve(my_matrix)
getting cached data
[,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> my_matrix$getInverse()
[,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix
my_matrix$get()
cacheSolve(my_matrix)
source('C:/Users/gregg.abramovich/Desktop/R Notes!/test2.R')
my_matrix$getInverse()
cacheSolve(my_matrix)
install_from_swirl("Getting and Cleaning Data")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library("ggplot2", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
install.packages("Rccp")
install.packages("Rcpp")
library("ggplot2", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
$ sudo apt-get install r-base-dev
library("RcppArmadillo", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
detach("package:RcppArmadillo", unload=TRUE)
system.file("lib", "Rcpp.h", package="Rcpp")
install.packages("Rcpp")
library("RcppArmadillo", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
install.packages("C:/Users/gregg.abramovich/Desktop/R Notes!/Rcpp_0.12.3.tar.gz", repos = NULL, type = "source")
library("RcppArmadillo", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
library("ggplot2", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
detach("package:ggplot2", unload=TRUE)
install.packages("C:/Users/gregg.abramovich/Desktop/R Notes!/Rcpp_0.12.3.zip", repos = NULL, type = "win.binary")
library("ggplot2", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
install.packages("RMySQL")
swirl()
library("swirl", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red',pch=8,main="Big Apple Stop"")
xyplot(Ozone~Wind,airquality,col="red',pch=8,main="Big Apple Stop")
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Stop")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone~Wind,data=airquality)
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
[["formula"]]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
xyplot(f)
xyplot(x,y)
f
table(f)
p <- xyplot(y~x|f,layout=c(2,1))
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
plot1.R(pathtofile(c))
pathtofile("plot1.R", local="TRUE")
pathtofile("plot1.R", local=TRUE)
View(pathtofile)
source(pathtofile("plot1.R"),local=TRUE)
type myedit("plot2.R")
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
with diamonds$color
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut,data = "diamonds", layout = c(2, 1))
xyplot(price~carat | color*cut,data = "diamonds")
xyplot(price~carat | color*cut, data = "Diamonds",pch=20)
xyplot(price~carat | color*cut)
xyplot(price~carat | color*cut, data = diamonds)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
colorRampPalette(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))\
showMe
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
>fun
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
rgb(3,0,1)
rgb(0,0,1)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
swirl()
str(mpg)
qplot(class,flmpg)
qplot(displ,mpg)
qplot(displ~hwy,mpg)
qplot(displ~hwy,data=mpg)
qplot(displ~hwy,data="mpg')
qplot(displ~hwy,data="mpg")
qplot(displ~hwy,data="mpg")
xyplot(displ~hwy,data=mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg,color = drv)
qplot(displ, hwy, data = mpg,color = drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom-"boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=. ~ drv)
qplot(hwy,data=mpg,facets = ~ . .,binwidth = 2)
qplot(hwy,data=mpg,facets = ~ . ., binwidth = 2)
qplot(hwy,data=mpg,facets = "~ . ."\, binwidth = 2)
qplot(hwy,data=mpg,facets = "~ . ."
, binwidth = 2)
qplot(hwy,data=mpg,facets = "~ . .", binwidth = 2)
qplot(hwy,data=mpg,facets = ~ . .)
qplot(hwy,data=mpg)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg,c("point","smooth",facets=.~drv,method="loess"))
qplot(displ, hwy, data=mpg,c("point","smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data=mpg,c("point","smooth"),facets=.~drv,method="loess")
qplot()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method="loess")
swirl()
library("swirl", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method="loess")
qplotReal <- qplot # Copies the function
xyplot()
library("ggplot2", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
xyplot()
xyplot
bwplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(xplot)
class(xyplot)
llines()
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight,llines)
xyplot(weight ~ Time | Diet, BodyWeight,llines())
xyplot(weight ~ Time | Diet, BodyWeight,llines(1))
xyplot(weight ~ Time | Diet, BodyWeight,lines(1))
xyplot(weight ~ Time | Diet, BodyWeight,axis(1))
xyplot(weight ~ Time | Diet, BodyWeight
axis()
axis(1)
llines()
llines(1,2)
llines(1,2)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print.trellis()
splom()
splom(1)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
detach("package:ggplot2", unload=TRUE)
library("swirl", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
swirl()
qplot()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <-ggplot(mpg,dsipl)
g<- ggplot()
g <- ggplot(mpg, aes(displ,hwy)
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g+geom_point()
eom_smooth()
geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+facet_grid(method = "lm")
g+geom_point()+facet_grid(method = . ~)
g+geom_point()
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g
g+geom_point(color="pink",size=4,alpha=1/2)
g
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
g
plot(myx, myy, type = "l", ylim = c(-3,3))
g
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <-  ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <-  ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
quit()
setwd("C:/Users/gregg.abramovich/Desktop/R Notes!")
zip.file.extract(activity, zipname = "repdata-data-activity.zip", unzip = getOption("unzip"))
downloader
library("utils", lib.loc="C:/Program Files/R/R-3.2.3/library")
unzip("repdata-data-activity")
?unzip
unzip("repdata-data-activity")
unzip("repdata-data-activity.zip")
library(data.table)
library(ggplot2) # we shall use ggplot2 for plotting figures
activityDataSet = read.csv("activity.csv")
head(activityDataSet)
activityDataSet$date <- as.Date(activityDataSet$date)
str(activityDataSet)
Histogram of the total number of steps taken each day
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
steps_per_day <- aggregate(data.ignore.na$steps ~ date, activityDataSet, sum)
totalStepsPerDay <- aggregate(steps ~ date, aggregate, sum)
totalStepsPerDay <- aggregate(steps ~ date, activityDataSet, sum)
head(totalStepsPerDay)
totalStepsPerDay <- data.frame(totalStepsPerDay)
str(totalStepsPerDay)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram()
qplot(totalStepsPerDay$steps, geom="histogram")
ggplot(totalStepsPerDay, aes(steps)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram()
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(binwidth = 0.01)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(binwidth = 0.3)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps))
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram()
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(fill = "red",bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_freqpoly(fill = "red",bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_freqpoly(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_freqpoly(colour = cut,bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_freqpoly(colour = cut)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_freqpoly(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps,colour = cut)) + geom_freqpoly(bins = 30, bins =30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps,colour = cut)) + geom_freqpoly(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps,colour = "cut"red"")) + geom_freqpoly(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps,colour = red"")) + geom_freqpoly(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_freqpoly(bins = 30)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(color="black", fill="white")
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(color="black", fill="white",bins=30)
p+ geom_vline(aes(xintercept=mean(steps)),
color="blue", linetype="dashed", size=1)
p+ geom_vline(aes(xintercept=mean(steps)),
color="blue", linetype="dashed", size=1)
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(color="black", fill="white",bins=30)
color="darkblue", fill="lightblue"
ggplot(data=totalStepsPerDay, aes(totalStepsPerDay$steps)) + geom_histogram(color="darkblue", fill="lightblue",bins=30)
qplot(totalStepsPerDay,  binwidth = 1.0, geom = "histogram", xlab = "Data", ylab = "Frequency",
y = ..density.., fill = I("white"), colour = I("black")) +
stat_density(geom = "line")
?qplot
qplot(steps,y=NULL,totalStepsPerDay)
qplot(steps, data = totalStepsPerDay, geom = "histogram")
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 1.0)
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500)
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency")
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day")
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black"))
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) +
+     stat_density(geom = "line")
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) +
+     stat_density(geom = "line")
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) + stat_density(geom = "line")
mean(steps)
mean(totalStepsPerDay$steps)
median(totalStepsPerDay$steps)
avgIntervalSteps <- ddply(data.ignore.na,~interval, summarise, mean=mean(steps))
library(plyr)
avgIntervalSteps <- ddply(data.ignore.na,~interval, summarise, mean=mean(steps))
avgIntervalSteps <- ddply(data.ignore.na,~interval, summarise, mean=mean(steps))
avgIntervalSteps <- ddply(data.ignore.na,~interval, summarise, mean=mean(steps))
steps_per_interval <- aggregate(rdata$steps,by = list(interval = rdata$interval),FUN=mean, na.rm=TRUE)
steps_per_interval <- aggregate(activityDataSet$steps,by = list(interval = rdata$interval),FUN=mean, na.rm=TRUE)
steps_per_interval <- aggregate(activityDataSet$steps,by = list(interval = activityDataSet$interval),FUN=mean, na.rm=TRUE)
steps_per_interval <- aggregate(activityDataSet$steps,by = list(interval = activityDataSet$interval),FUN=mean, na.rm=TRUE)
steps_per_interval <- aggregate(activityDataSet$steps,by = list(interval = activityDataSet$interval),FUN=mean, na.rm=TRUE)
stepsPerInterval <- aggregate(activityDataSet$steps,by = list(interval = activityDataSet$interval),FUN=mean, na.rm=TRUE)
stepsPerInterval
stepsPerInterval <- aggregate(activityDataSet$steps,by = list(interval = activityDataSet$interval),FUN=mean, na.rm=TRUE)
(echo = TRUE, results = 'hold')
(echo = TRUE,results = 'hold')
opts_chunk$set(echo = TRUE, results = 'hold')
str(stepsPerInterval)
head(stepsPerInterval)
qplot(steps, data = stepsPerInterval, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black"))
qplot(steps, data = stepsPerInterval, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black"))
qplot(interval, data = stepsPerInterval, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black"))
qplot(x=interval, y=mean, data = stepsPerInterval,  geom = "line",
xlab="5-Minute Interval,
ylab="Number of Steps",
main="Average"
)
qplot(x=interval, y=mean, data = stepsPerInterval,  geom = "line", xlab="5-Minute Interval, ylab="Number of Steps", main="Average")
qplot(x=interval, y=mean, data = stepsPerInterval,  geom = "line", xlab="5-Minute Interval", ylab="Number of Steps", main="Average")
qplot(x=interval, y=mean, data = stepsPerInterval,  geom = "line", xlab="5-Minute Interval", ylab="Number of Steps", main="Average")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(stepsPerInterval, aes(x=interval, y=stepsPerInterval$steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(stepsPerInterval, aes(x=interval, y=stepsPerInterval$steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1)
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1)
ggplot(stepsPerInterval, aes(x=interval, y=stepsPerInterval$steps)) +
geom_line(color="orange", size=1)
colnames(stepsPerInterval) <- c("interval", "steps")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1)
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black")), size=1)
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1)
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + xlab("Number of steps counted")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted")
head(stepsPerInterval)
stepsPerInterval
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + title="Average Daily Activity Pattern"
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + title="Average Daily Activity Pattern"
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + title="Average Daily Activity Pattern" + ggtitle("Daily Activity Pattern")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + title="Average Daily Activity Pattern" + main="Average Number of Steps Taken Averaged Across All Days"
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + main="Average Number of Steps Taken Averaged Across All Days"
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + main=("Average Number of Steps Taken Averaged Across All Days")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + main("Average Number of Steps Taken Averaged Across All Days")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) +xlab("5 minute intervals") + ylab("Number of steps counted") + title("Average Number of Steps Taken Averaged Across All Days")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) +
geom_line(color=I("black"), size=1) + labs(title="Daily Activity Pattern", x="5 minute intervals", y="Number of steps counted")
stepsPerInterval
max(stepsPerInterval$steps)
max(stepsPerInterval$steps)
which.max(stepsPerInterval$steps)
missingNaVals <- sum(is.na(activityDataSet$date$steps))
missingNaVals <- sum(is.na(activityDataSet$steps))
missingNaVals
getMeanStepsPerInterval <- function(interval){
steps_interval[steps_interval$interval==interval,"steps"]
}
getMeanStepsPerInterval <- function(interval){
stepsPerInterval[stepsPerInterval$interval==interval,"steps"]
}
activityDataSetFilled <- activityDataSet
## Filling the missing values with the mean for that 5-minute interval
flag = 0
for (i in 1:nrow(activityDataSetFilled)) {
if (is.na(activityDataSetFilled[i,"steps"])) {
activityDataSetFilled[i,"steps"] <- getMeanStepsPerInterval(activityDataSetFilled[i,"interval"])
flag = flag + 1
}
}
flag
## Filling the missing values with the mean for that 5-minute interval
rowcount = 0
for (i in 1:nrow(activityDataSetFilled)) {
if (is.na(activityDataSetFilled[i,"steps"])) {
activityDataSetFilled[i,"steps"] <- getMeanStepsPerInterval(activityDataSetFilled[i,"interval"])
rowcount = rowcount + 1
}
}
rowcount
totalStepsPerDayFilled <- aggregate(steps ~ date, activityDataSetFilled, sum)
totalStepsPerDayFilled <- data.frame(totalStepsPerDayFilled) ##convert to data frame for grpahing package
qplot(steps, data = totalStepsPerDayFilled, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) + stat_density(geom = "line")
Calculate and report the mean and median total number of steps taken per day
showMean <- mean(totalStepsPerDayFilled$steps)
showMedian <- median(totalStepsPerDayFilled$steps)
showMean <- mean(totalStepsPerDayFilled$steps)
showMedian <- median(totalStepsPerDayFilled$steps)
showMean <- mean(totalStepsPerDayFilled$steps median(totalStepsPerDayFilled$steps)
mean(totalStepsPerDayFilled$steps)
median(totalStepsPerDayFilled$steps)
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) + stat_density(geom = "line")
median(totalStepsPerDay$steps)
head(activityDataSetFilled)
activityDataSetFilled2 <- activityDataSetFilled
#create a vector of weekdays
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#Use `%in%` and `weekdays` to create a logical vector
##convert to `factor` and specify the `levels/labels`
activityDataSetFilled2$wDay <- factor((weekdays(activityDataSetFilled2$date) %in% weekdays1),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday')
activityDataSetFilled2$wDay <- c('weekend', 'weekday')[(weekdays(activityDataSetFilled2$date) %in% weekdays1)+1L]
activityDataSetFilled2
head(activityDataSetFilled2)
activityDataSetFilled2$wDay <- c('weekend', 'weekday')[(weekdays(activityDataSetFilled2$date) %in% weekdays1)+1L]
sInt = aggregate(steps ~ interval + day, activityDataSetFilled2, mean)
sInt = aggregate(steps ~ interval + wDay, activityDataSetFilled2, mean)
xyplot(steps ~ interval | factor(day), data = sInt, aspect = 1/2,  type = "l")
library(lattice)
xyplot(steps ~ interval | factor(day), data = sInt, aspect = 1/2,  type = "l")
xyplot(steps ~ interval | factor(wDay), data = sInt, aspect = 1/2,  type = "l")
##output: html_document
qplot(steps, data = totalStepsPerDay, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) + stat_density(geom = "line")
ggplot(stepsPerInterval, aes(x=interval, y=steps)) + geom_line(color=I("black"), size=1) + labs(title="Daily Activity Pattern", x="5 minute intervals", y="Number of steps counted")
qplot(steps, data = totalStepsPerDayFilled, geom = "histogram",binwidth = 500,xlab = "Total # of Daily Steps", ylab = "Frequency of Times Per Day", y = ..density.., fill = I("white"), colour = I("black")) + stat_density(geom = "line")
library("caTools", lib.loc="\\\\unimatrixone/MIS/gregg.abramovich/R/win-library/3.2")
